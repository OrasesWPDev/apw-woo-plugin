This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
assets/
  images/
    faq-arrow.svg
    faq-q.svg
  js/
    apw-woo-public.js
includes/
  class-apw-woo-plugin.php
  class-template-loader.php
templates/
  partials/
    faq-display.php
  woocommerce/
    partials/
      category-products-display.php
      shop-categories-display.php
    archive-product.php
    single-product.php
.gitignore
apw-woo-plugin.php
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="assets/images/faq-arrow.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="109.261" height="108.935" viewBox="0 0 109.261 108.935">
  <g id="arow_t" data-name="arow t" transform="translate(109.261 68.779) rotate(150)">
    <g id="Ellipse_6" data-name="Ellipse 6" transform="translate(0 0)" fill="#fff" stroke="#92ddc6" stroke-width="5">
      <ellipse cx="40.156" cy="39.71" rx="40.156" ry="39.71" stroke="none"/>
      <ellipse cx="40.156" cy="39.71" rx="37.656" ry="37.21" fill="none"/>
    </g>
    <path id="arrow" d="M24.379,8.846,16.159.626a2.012,2.012,0,1,0-2.846,2.844l4.859,4.851H2.012a2.013,2.013,0,0,0,0,4.025H18.128l-4.814,4.821a2.012,2.012,0,0,0,2.846,2.844l8.22-8.22a2,2,0,0,0,.589-1.423.413.413,0,0,0,0-.05.413.413,0,0,0,0-.05,2.012,2.012,0,0,0-.589-1.423Z" transform="translate(45.861 55.09) rotate(-150)" fill="#00aade"/>
  </g>
</svg>
</file>

<file path="assets/images/faq-q.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="109.261" height="108.935" viewBox="0 0 109.261 108.935">
  <g id="arow_t" data-name="arow t" transform="translate(109.261 68.779) rotate(150)">
    <g id="Ellipse_6" data-name="Ellipse 6" transform="translate(0 0)" fill="#fff" stroke="#92ddc6" stroke-width="5">
      <ellipse cx="40.156" cy="39.71" rx="40.156" ry="39.71" stroke="none"/>
      <ellipse cx="40.156" cy="39.71" rx="37.656" ry="37.21" fill="none"/>
    </g>
    <text id="Q" transform="translate(58.413 77.348) rotate(-150)" fill="#00aade" font-size="38" font-family="Montserrat-Bold, Montserrat" font-weight="700" letter-spacing="-0.025em"><tspan x="-15" y="37">Q</tspan></text>
  </g>
</svg>
</file>

<file path="assets/js/apw-woo-public.js">
/**
 * APW WooCommerce Plugin Public Scripts
 */
(function($) {
    'use strict';

    // Plugin code will go here in future sprints
    console.log('APW WooCommerce Plugin loaded');

})(jQuery);
</file>

<file path=".gitignore">
# Operating system files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Editor files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace
*.zip

# Build/dependency directories
node_modules/
vendor/

# Logs
*.log


# Environment files
.env
.env.*
!.env.example
/.git
/.github


# Compiled assets
*.min.css
*.min.js

# Aider files
.aider*
aider*

# Output files
*-output.txt
</file>

<file path="includes/class-apw-woo-plugin.php">
<?php
/**
 * Main Plugin Class
 *
 * @package APW_Woo_Plugin
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main plugin class
 */
class APW_Woo_Plugin {
    /**
     * Instance of this class
     *
     * @var self
     */
    private static $instance = null;

    /**
     * Constructor
     */
    private function __construct() {
        apw_woo_log('Main plugin class constructed');
    }

    /**
     * Get instance
     *
     * @return self
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Initialize the plugin
     */
    public function init() {
        apw_woo_log('Initializing main plugin class');
        // Initialize template loader
        $template_loader = APW_Woo_Template_Loader::get_instance();

        // Only add test notice when debug mode is enabled
        if (APW_WOO_DEBUG_MODE) {
            add_action('admin_notices', [$this, 'display_test_notice']);
        }
    }

    /**
     * Display a test notice in admin to confirm plugin is working
     */
    public function display_test_notice() {
        ?>
        <div class="notice notice-success is-dismissible">
            <p><?php _e('APW WooCommerce Plugin is active and working! (This is a test notice for Sprint 1)', 'apw-woo-plugin'); ?></p>
        </div>
        <?php
    }
}
</file>

<file path="templates/woocommerce/archive-product.php">
<?php
/**
 * The Template for displaying product archives (shop and category pages)
 *
 * This template determines which custom template to load based on the current page.
 *
 * @package APW_Woo_Plugin
 * @version 1.0.0
 */

defined('ABSPATH') || exit;

if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('archive-product.php template loaded');
}

/**
 * Hook: woocommerce_before_main_content.
 */
do_action('woocommerce_before_main_content');

// Start buffering output
ob_start();

if (is_shop() && !is_search()) {
    // Main shop page - load the shop categories display template
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Current page is shop page - loading shop categories template');
    }
    include(APW_WOO_PLUGIN_DIR . 'templates/woocommerce/partials/shop-categories-display.php');
} elseif (is_product_category()) {
    // Category page - load the category products display template
    $current_category = get_queried_object();
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Current page is category page: ' . $current_category->name . ' - loading category products template');
    }
    include(APW_WOO_PLUGIN_DIR . 'templates/woocommerce/partials/category-products-display.php');
} else {
    // Other WooCommerce pages (search results, etc.) - use default WooCommerce template
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Current page is another WooCommerce archive page - using default template');
    }

    if (woocommerce_product_loop()) {
        do_action('woocommerce_before_shop_loop');
        woocommerce_product_loop_start();

        if (wc_get_loop_prop('total')) {
            while (have_posts()) {
                the_post();
                do_action('woocommerce_shop_loop');
                wc_get_template_part('content', 'product');
            }
        }

        woocommerce_product_loop_end();
        do_action('woocommerce_after_shop_loop');
    } else {
        do_action('woocommerce_no_products_found');
    }
}

// Get the buffered content
$archive_content = ob_get_clean();

// Output the content
echo $archive_content;

/**
 * Hook: woocommerce_after_main_content.
 */
do_action('woocommerce_after_main_content');
</file>

<file path="templates/partials/faq-display.php">
<?php
/**
 * FAQ Display Partial
 *
 * This template displays FAQs from ACF field groups and can be included from
 * various template files, accepting different context variables:
 * - $faq_page_id: ID of a page containing FAQs (for shop page)
 * - $faq_category: Category object containing FAQs (for category pages)
 * - $faq_product: Product object containing FAQs (for single product pages)
 *
 * @package APW_Woo_Plugin
 */
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Debugging
if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('FAQ display partial loaded');
}

/**
 * Verify ACF FAQ fields are being retrieved properly
 *
 * @param array|false $faqs The FAQs array or false if not available
 * @param string $source The source of the FAQs (page, category, product)
 * @param mixed $source_object The object containing the FAQs
 * @return array|false The original FAQs array or false if not available
 */
function apw_woo_verify_faq_fields($faqs, $source, $source_object) {
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log("FAQ Verification: Checking {$source} FAQs");

        if (false === $faqs) {
            apw_woo_log("FAQ Verification ERROR: No FAQs found for {$source}");
        } elseif (empty($faqs)) {
            apw_woo_log("FAQ Verification WARNING: Empty FAQs array for {$source}");
        } else {
            apw_woo_log("FAQ Verification SUCCESS: Found " . count($faqs) . " FAQs for {$source}");

            // Log first FAQ as sample data
            if (isset($faqs[0])) {
                $sample = $faqs[0];
                $question = isset($sample['question']) ? substr($sample['question'], 0, 50) . '...' : 'NO QUESTION FIELD';
                $answer = isset($sample['answer']) ? substr($sample['answer'], 0, 50) . '...' : 'NO ANSWER FIELD';
                apw_woo_log("FAQ Sample - Q: {$question} A: {$answer}");
            }
        }
    }

    return $faqs;
}

// Initialize FAQs array
$faqs = null;

// Check which context variable is provided and get the appropriate FAQs
if (!empty($faq_page_id) && function_exists('get_field')) {
    // Get FAQs from specific page ID
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Getting FAQs from page ID: ' . $faq_page_id);
    }
    $faqs = get_field('faqs', $faq_page_id);
    $faqs = apply_filters('apw_woo_page_faqs', $faqs, $faq_page_id);
    $faqs = apw_woo_verify_faq_fields($faqs, 'page', $faq_page_id);
} elseif (!empty($faq_category) && function_exists('get_field')) {
    // Get FAQs from category
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Getting FAQs from category: ' . $faq_category->name);
    }
    $faqs = get_field('faqs', $faq_category);
    $faqs = apply_filters('apw_woo_category_faqs', $faqs, $faq_category);
    $faqs = apw_woo_verify_faq_fields($faqs, 'category', $faq_category);
} elseif (!empty($faq_product) && function_exists('get_field')) {
    // Get FAQs from product
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Getting FAQs from product: ' . $faq_product->get_name());
    }
    $faqs = get_field('faqs', $faq_product->get_id());
    $faqs = apply_filters('apw_woo_product_faqs', $faqs, $faq_product);
    $faqs = apw_woo_verify_faq_fields($faqs, 'product', $faq_product);
} else {
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('No valid source provided for FAQs');
    }
}

// Only display if we have FAQs
if (!empty($faqs)) {
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Found ' . count($faqs) . ' FAQs to display');
        // Check if we're in output buffering context
        apw_woo_log("FAQ Rendering: Output buffering " . (ob_get_level() > 0 ? "is active (Level: " . ob_get_level() . ")" : "is NOT active"));
    }

    /**
     * Hook: apw_woo_before_faq_section
     * @param array $faqs The array of FAQs to be displayed
     */
    do_action('apw_woo_before_faq_section', $faqs);
    ?>
    <!-- FAQ Section -->
    <div class="apw-woo-faq-section">
        <!-- APW-WOO-TEMPLATE: faq-display.php is loaded -->
        <?php
        /**
         * Hook: apw_woo_before_faq_title
         * @param array $faqs The array of FAQs to be displayed
         */
        do_action('apw_woo_before_faq_title', $faqs);
        ?>
        <!-- FAQ Title -->
        <h2 class="apw-woo-faq-title">
            <?php
            $faq_title = (count($faqs) > 1)
                ? __('Frequently asked questions', 'apw-woo-plugin')
                : __('Frequently asked question', 'apw-woo-plugin');
            echo esc_html(apply_filters('apw_woo_faq_title', $faq_title, count($faqs)));
            ?>
        </h2>
        <?php
        /**
         * Hook: apw_woo_after_faq_title
         * @param array $faqs The array of FAQs to be displayed
         */
        do_action('apw_woo_after_faq_title', $faqs);
        ?>
        <!-- FAQ Items Container -->
        <div class="apw-woo-faq-container">
            <?php
            foreach ($faqs as $index => $faq) :
                // Validate FAQ structure
                if (!isset($faq['question']) || !isset($faq['answer'])) {
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("FAQ Structure Error: Missing question or answer in FAQ #{$index}");
                    }
                    continue;
                }

                /**
                 * Hook: apw_woo_before_faq_item
                 * @param array $faq The current FAQ item
                 * @param int $index The index of the current FAQ
                 * @param array $faqs The complete array of FAQs
                 */
                do_action('apw_woo_before_faq_item', $faq, $index, $faqs);
                ?>
                <!-- Single FAQ Item -->
                <div class="apw-woo-faq-item" id="faq-item-<?php echo esc_attr($index); ?>">
                    <div class="row apw-woo-faq-row">
                        <div class="col apw-woo-faq-col">
                            <!-- Question with Q icon -->
                            <div class="apw-woo-faq-question">
                                <div class="apw-woo-faq-q-icon">
                                    <img src="<?php echo esc_url(apply_filters('apw_woo_faq_q_icon', APW_WOO_PLUGIN_URL . 'assets/images/faq-q.svg')); ?>"
                                         alt="<?php echo esc_attr__('Q', 'apw-woo-plugin'); ?>"
                                         class="apw-woo-faq-q-image" />
                                </div>
                                <div class="apw-woo-faq-question-text">
                                    <?php echo wp_kses_post(apply_filters('apw_woo_faq_question', $faq['question'], $index)); ?>
                                </div>
                            </div>
                            <!-- Answer section -->
                            <div class="apw-woo-faq-answer">
                                <!-- Answer Label -->
                                <div class="apw-woo-faq-answer-label">
                                    <?php echo esc_html(apply_filters('apw_woo_faq_answer_label', __('ANSWER', 'apw-woo-plugin'), $index)); ?>
                                </div>
                                <!-- Answer Content -->
                                <div class="apw-woo-faq-answer-content">
                                    <?php echo wp_kses_post(apply_filters('apw_woo_faq_answer', $faq['answer'], $index)); ?>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <?php
                /**
                 * Hook: apw_woo_after_faq_item
                 * @param array $faq The current FAQ item
                 * @param int $index The index of the current FAQ
                 * @param array $faqs The complete array of FAQs
                 */
                do_action('apw_woo_after_faq_item', $faq, $index, $faqs);
            endforeach;
            ?>
        </div>
    </div>
    <?php
    /**
     * Hook: apw_woo_after_faq_section
     * @param array $faqs The array of FAQs that were displayed
     */
    do_action('apw_woo_after_faq_section', $faqs);
} else {
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('No FAQs found to display');
    }
    /**
     * Hook: apw_woo_no_faqs_found
     */
    do_action('apw_woo_no_faqs_found');
}
</file>

<file path="templates/woocommerce/partials/category-products-display.php">
<?php
/**
 * Template for displaying products within a specific category
 *
 * @package APW_Woo_Plugin
 */
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('Loading category products display template');
}

// Add defensive code here - before get_header()
// Ensure we have a valid category object
if (!isset($current_category) || !is_object($current_category)) {
    $current_category = get_queried_object();
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Category template: Valid $current_category not provided, fetching from queried object');
    }

    // Additional verification that we got a valid term
    if (!is_a($current_category, 'WP_Term') || $current_category->taxonomy !== 'product_cat') {
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Category template WARNING: Not on a valid product category page');
        }
    }
}

get_header();
?>
    <main id="main" class="apw-woo-category-products-main">
        <!-- APW-WOO-TEMPLATE: category-products-display.php is loaded -->

        <!-- Header Block - Contains hero image, page title, and breadcrumbs -->
        <div class="apw-woo-section-wrapper apw-woo-header-block">
            <?php
            /**
             * Hook: apw_woo_before_category_header
             * @param WP_Term $current_category Current category object
             */
            do_action('apw_woo_before_category_header', $current_category);

            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log('Rendering category page header');
            }

            if (shortcode_exists('block')) {
                echo do_shortcode('[block id="third-level-page-header"]');
            } else {
                // Fallback if shortcode doesn't exist
                echo '<h1 class="apw-woo-page-title">' . esc_html(single_term_title('', false)) . '</h1>';
            }

            /**
             * Hook: apw_woo_after_category_header
             * @param WP_Term $current_category Current category object
             */
            do_action('apw_woo_after_category_header', $current_category);
            ?>
        </div>

        <!-- Use Flatsome's container while keeping our plugin-specific classes -->
        <div class="container">
            <div class="row">
                <div class="col apw-woo-content-wrapper">
                    <?php
                    /**
                     * Hook: apw_woo_before_category_content
                     * @param WP_Term $current_category Current category object
                     */
                    do_action('apw_woo_before_category_content', $current_category);

                    // Get the current category
                    $current_category = get_queried_object();

                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log('Displaying products for category: ' . $current_category->name);
                    }
                    ?>

                    <!-- Product Grid Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-products-section">
                            <?php
                            /**
                             * Hook: apw_woo_before_products_grid
                             * @param WP_Term $current_category Current category object
                             */
                            do_action('apw_woo_before_products_grid', $current_category);

                            if (APW_WOO_DEBUG_MODE) {
                                apw_woo_log('Fetching products for category: ' . $current_category->slug);
                            }

                            // Get products in this category
                            $products = apply_filters('apw_woo_category_products', wc_get_products([
                                'status' => 'publish',
                                'limit' => -1,
                                'category' => [$current_category->slug],
                            ]), $current_category);

                            if (!empty($products)) {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('Found ' . count($products) . ' products to display');
                                }
                                ?>

                                <div class="apw-woo-products-grid">
                                    <?php
                                    foreach ($products as $product) {
                                        // Get product data
                                        $product_id = $product->get_id();
                                        $product_title = $product->get_name();
                                        $product_link = get_permalink($product_id);
                                        $product_image_id = $product->get_image_id();
                                        $product_image = wp_get_attachment_url($product_image_id);

                                        if (APW_WOO_DEBUG_MODE) {
                                            apw_woo_log('Rendering product: ' . $product_title);
                                        }

                                        /**
                                         * Hook: apw_woo_before_product_item
                                         * @param WC_Product $product Current product object
                                         * @param WP_Term $current_category Current category object
                                         */
                                        do_action('apw_woo_before_product_item', $product, $current_category);
                                        ?>

                                        <!-- Individual Product Item -->
                                        <div class="apw-woo-product-item">
                                            <div class="row apw-woo-product-row">
                                                <div class="col apw-woo-product-header-col">
                                                    <!-- Product Header: Title and View Product Button -->
                                                    <div class="apw-woo-product-header">
                                                        <h1 class="apw-woo-product-title"><?php echo esc_html($product_title); ?></h1>
                                                        <a href="<?php echo esc_url($product_link); ?>" class="apw-woo-view-product-button">
                                                            <?php echo esc_html(apply_filters('apw_woo_view_product_text', __('View Product', 'apw-woo-plugin'), $product)); ?>
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row apw-woo-product-image-row">
                                                <div class="col apw-woo-product-image-col">
                                                    <!-- Product Image Container -->
                                                    <div class="apw-woo-product-image-wrapper">
                                                        <a href="<?php echo esc_url($product_link); ?>" class="apw-woo-product-image-link">
                                                            <img src="<?php echo esc_url($product_image); ?>"
                                                                 alt="<?php echo esc_attr($product_title); ?>"
                                                                 class="apw-woo-product-image" />
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>

                                            <?php
                                            /**
                                             * Hook: apw_woo_after_product_content
                                             * @param WC_Product $product Current product object
                                             * @param WP_Term $current_category Current category object
                                             */
                                            do_action('apw_woo_after_product_content', $product, $current_category);
                                            ?>
                                        </div>

                                        <?php
                                        /**
                                         * Hook: apw_woo_after_product_item
                                         * @param WC_Product $product Current product object
                                         * @param WP_Term $current_category Current category object
                                         */
                                        do_action('apw_woo_after_product_item', $product, $current_category);
                                    }
                                    ?>
                                </div>

                                <?php
                            } else {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('No products found in category: ' . $current_category->slug);
                                }

                                /**
                                 * Hook: apw_woo_no_products_found
                                 * @param WP_Term $current_category Current category object
                                 */
                                do_action('apw_woo_no_products_found', $current_category);
                                ?>

                                <!-- No Products Found Message -->
                                <div class="apw-woo-no-products">
                                    <p><?php echo esc_html(apply_filters('apw_woo_no_products_text', __('No products found in this category.', 'apw-woo-plugin'), $current_category)); ?></p>
                                </div>

                                <?php
                            }

                            /**
                             * Hook: apw_woo_after_products_grid
                             * @param WP_Term $current_category Current category object
                             */
                            do_action('apw_woo_after_products_grid', $current_category);
                            ?>
                        </div>
                    </div>

                    <!-- FAQ Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-faq-section-container">
                            <?php
                            /**
                             * Hook: apw_woo_before_category_faqs
                             * @param WP_Term $current_category Current category object
                             */
                            do_action('apw_woo_before_category_faqs', $current_category);

                            if (APW_WOO_DEBUG_MODE) {
                                apw_woo_log('Loading FAQ display for category: ' . $current_category->name);
                            }

                            // Include the FAQ display partial, passing the current category
                            if (file_exists(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php')) {
                                // Set the category object that will be accessible in the included file
                                if (!isset($current_category) || !is_object($current_category)) {
                                    if (APW_WOO_DEBUG_MODE) {
                                        apw_woo_log('ERROR: Invalid category object passed to FAQ display');
                                    }
                                    $faq_category = null;
                                } else {
                                    $faq_category = apply_filters('apw_woo_faq_category', $current_category);
                                    if (APW_WOO_DEBUG_MODE) {
                                        apw_woo_log('Passing category to FAQ display: ' . $faq_category->name);
                                    }
                                }
                                include(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php');
                            } else {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('FAQ display partial not found');
                                }
                            }

                            /**
                             * Hook: apw_woo_after_category_faqs
                             * @param WP_Term $current_category Current category object
                             */
                            do_action('apw_woo_after_category_faqs', $current_category);
                            ?>
                        </div>
                    </div>

                    <?php
                    /**
                     * Hook: apw_woo_after_category_content
                     * @param WP_Term $current_category Current category object
                     */
                    do_action('apw_woo_after_category_content', $current_category);
                    ?>
                </div>
            </div>
        </div>
    </main>
<?php
if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('Completed rendering category products template for: ' . $current_category->name);
}

get_footer();
?>
</file>

<file path="templates/woocommerce/partials/shop-categories-display.php">
<?php
/**
 * Template for displaying product categories on the shop page
 *
 * @package APW_Woo_Plugin
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('Loading shop categories display template');
}

// Ensure we're on a shop page
if (!is_shop() && APW_WOO_DEBUG_MODE) {
    apw_woo_log('Shop categories template: Not on a shop page');
}

// If the template is included directly, we may need shop data
if (function_exists('wc_get_page_id') && function_exists('get_option')) {
    $shop_page_id = wc_get_page_id('shop');
    $shop_page_display = get_option('woocommerce_shop_page_display', '');

    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Shop categories template: Shop page ID: ' . $shop_page_id);
        apw_woo_log('Shop categories template: Shop page display mode: ' . $shop_page_display);
    }
}

get_header();
?>
    <main id="main" class="apw-woo-shop-categories-main">
        <!-- APW-WOO-TEMPLATE: shop-categories-display.php is loaded -->

        <!-- Header Block - Contains hero image, page title, and breadcrumbs -->
        <div class="apw-woo-section-wrapper apw-woo-header-block">
            <?php
            /**
             * Hook: apw_woo_before_shop_header
             */
            do_action('apw_woo_before_shop_header');

            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log('Rendering shop page header');
            }

            if (shortcode_exists('block')) {
                echo do_shortcode('[block id="second-level-page-header"]');
            } else {
                // Fallback if shortcode doesn't exist
                echo '<h1 class="apw-woo-page-title">' . esc_html(woocommerce_page_title(false)) . '</h1>';
            }

            /**
             * Hook: apw_woo_after_shop_header
             */
            do_action('apw_woo_after_shop_header');
            ?>
        </div>

        <!-- Use Flatsome's container while keeping our plugin-specific classes -->
        <div class="container">
            <div class="row">
                <div class="col apw-woo-content-wrapper">
                    <?php
                    /**
                     * Hook: apw_woo_before_shop_content
                     */
                    do_action('apw_woo_before_shop_content');
                    ?>

                    <!-- Shop Introduction Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-intro-section">
                            <?php
                            /**
                             * Hook: apw_woo_before_shop_intro
                             */
                            do_action('apw_woo_before_shop_intro');
                            ?>

                            <div class="apw-woo-product-intro">
                                <h1 class="apw-woo-section-title"><?php echo esc_html(apply_filters('apw_woo_shop_intro_title', __('Our Products', 'apw-woo-plugin'))); ?></h1>
                                <div class="apw-woo-section-description">
                                    <?php echo wp_kses_post(apply_filters('apw_woo_shop_intro_description', '<p>' . __('This is a placeholder paragraph that can be edited later. It will provide an introduction to the product categories offered by the company.', 'apw-woo-plugin') . '</p>')); ?>
                                </div>
                            </div>

                            <?php
                            /**
                             * Hook: apw_woo_after_shop_intro
                             */
                            do_action('apw_woo_after_shop_intro');
                            ?>
                        </div>
                    </div>

                    <!-- Product Categories Grid Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-categories-section">
                            <?php
                            /**
                             * Hook: apw_woo_before_categories_grid
                             */
                            do_action('apw_woo_before_categories_grid');

                            if (APW_WOO_DEBUG_MODE) {
                                apw_woo_log('Fetching product categories for shop page');
                            }

                            // Get product categories
                            $product_categories = apply_filters('apw_woo_shop_categories', get_terms([
                                'taxonomy'   => 'product_cat',
                                'hide_empty' => true,
                                'parent'     => 0, // Get only top-level categories
                            ]));

                            if (!empty($product_categories) && !is_wp_error($product_categories)) {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('Found ' . count($product_categories) . ' product categories to display');
                                }
                                ?>

                                <div class="apw-woo-categories-grid">
                                    <?php
                                    foreach ($product_categories as $category) {
                                        // Skip the "Uncategorized" category
                                        if (apply_filters('apw_woo_skip_uncategorized', $category->slug === 'uncategorized', $category)) {
                                            if (APW_WOO_DEBUG_MODE) {
                                                apw_woo_log('Skipping uncategorized category');
                                            }
                                            continue;
                                        }

                                        if (APW_WOO_DEBUG_MODE) {
                                            apw_woo_log('Rendering category: ' . $category->name);
                                        }

                                        // Get category image
                                        $thumbnail_id = get_term_meta($category->term_id, 'thumbnail_id', true);
                                        $image = wp_get_attachment_url($thumbnail_id);

                                        // Get category link
                                        $category_link = get_term_link($category);

                                        /**
                                         * Hook: apw_woo_before_category_item
                                         * @param WP_Term $category Current category object
                                         */
                                        do_action('apw_woo_before_category_item', $category);
                                        ?>

                                        <!-- Individual Category Item -->
                                        <div class="apw-woo-category-item">
                                            <div class="row apw-woo-category-row">
                                                <div class="col apw-woo-category-header-col">
                                                    <!-- Category Header: Title and View All Button -->
                                                    <div class="apw-woo-category-header">
                                                        <h1 class="apw-woo-category-title"><?php echo esc_html($category->name); ?></h1>
                                                        <a href="<?php echo esc_url($category_link); ?>" class="apw-woo-view-all-button">
                                                            <?php echo esc_html(apply_filters('apw_woo_view_all_text', __('View All', 'apw-woo-plugin'))); ?>
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row apw-woo-category-image-row">
                                                <div class="col apw-woo-category-image-col">
                                                    <!-- Category Image Container -->
                                                    <div class="apw-woo-category-image-wrapper">
                                                        <a href="<?php echo esc_url($category_link); ?>" class="apw-woo-category-image-link">
                                                            <img src="<?php echo esc_url($image); ?>"
                                                                 alt="<?php echo esc_attr($category->name); ?>"
                                                                 class="apw-woo-category-image" />
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row apw-woo-category-desc-row">
                                                <div class="col apw-woo-category-desc-col">
                                                    <!-- Category Description -->
                                                    <?php
                                                    /**
                                                     * Hook: apw_woo_before_category_description
                                                     * @param WP_Term $category Current category object
                                                     */
                                                    do_action('apw_woo_before_category_description', $category);

                                                    if (!empty($category->description)) :
                                                        if (APW_WOO_DEBUG_MODE) {
                                                            apw_woo_log('Using custom description for category: ' . $category->name);
                                                        }
                                                        ?>
                                                        <div class="apw-woo-category-description">
                                                            <?php echo wp_kses_post($category->description); ?>
                                                        </div>
                                                    <?php else :
                                                        if (APW_WOO_DEBUG_MODE) {
                                                            apw_woo_log('Using default description for category: ' . $category->name);
                                                        }
                                                        ?>
                                                        <div class="apw-woo-category-description">
                                                            <?php echo wp_kses_post(apply_filters('apw_woo_default_category_description', '<p>' . __('Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumyt, consetetur sadipscing elitr, sed diam nonumy eirmod tem tempor invidunt ut.', 'apw-woo-plugin') . '</p>', $category)); ?>
                                                        </div>
                                                    <?php endif;

                                                    /**
                                                     * Hook: apw_woo_after_category_description
                                                     * @param WP_Term $category Current category object
                                                     */
                                                    do_action('apw_woo_after_category_description', $category);
                                                    ?>
                                                </div>
                                            </div>
                                        </div>

                                        <?php
                                        /**
                                         * Hook: apw_woo_after_category_item
                                         * @param WP_Term $category Current category object
                                         */
                                        do_action('apw_woo_after_category_item', $category);
                                    }
                                    ?>
                                </div>

                                <?php
                            } else {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('No product categories found');
                                }

                                /**
                                 * Hook: apw_woo_no_categories_found
                                 */
                                do_action('apw_woo_no_categories_found');
                                ?>

                                <!-- No Categories Found Message -->
                                <div class="apw-woo-no-categories">
                                    <p><?php echo esc_html(apply_filters('apw_woo_no_categories_text', __('No product categories found.', 'apw-woo-plugin'))); ?></p>
                                </div>

                                <?php
                            }

                            /**
                             * Hook: apw_woo_after_categories_grid
                             */
                            do_action('apw_woo_after_categories_grid');
                            ?>
                        </div>
                    </div>

                    <!-- FAQ Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-faq-section-container">
                            <?php
                            /**
                             * Hook: apw_woo_before_shop_faqs
                             */
                            do_action('apw_woo_before_shop_faqs');

                            if (APW_WOO_DEBUG_MODE) {
                                apw_woo_log('Loading FAQ display for shop page');
                            }

                            // Include the FAQ display partial, passing the page ID from which to pull the FAQs
                            if (file_exists(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php')) {
                                // Set the page ID variable that will be accessible in the included file
                                $faq_page_id = apw_woo_get_faq_page_id('shop');
                                include(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php');
                            } else {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('FAQ display partial not found');
                                }
                            }

                            /**
                             * Hook: apw_woo_after_shop_faqs
                             */
                            do_action('apw_woo_after_shop_faqs');
                            ?>
                        </div>
                    </div>

                    <?php
                    /**
                     * Hook: apw_woo_after_shop_content
                     */
                    do_action('apw_woo_after_shop_content');
                    ?>
                </div>
            </div>
        </div>
    </main>
<?php
if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('Completed rendering shop categories template');
}

get_footer();
?>
</file>

<file path="apw-woo-plugin.php">
<?php
/**
 * Plugin Name: APW WooCommerce Plugin
 * Plugin URI: https://github.com/OrasesWPDev/apw-woo-plugin
 * Description: Custom WooCommerce enhancements for displaying products across shop, category, and product pages.
 * Version: 1.0.0
 * Author: Orases
 * Author URI: https://orases.com
 * Text Domain: apw-woo-plugin
 * WC requires at least: 5.0
 * WC tested up to: 8.0
 */

// If this file is called directly, abort.
if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Add HPOS compatibility
add_action('before_woocommerce_init', function() {
    if (class_exists(\Automattic\WooCommerce\Utilities\FeaturesUtil::class)) {
        \Automattic\WooCommerce\Utilities\FeaturesUtil::declare_compatibility(
            'custom_order_tables',
            __FILE__,
            true
        );
    }
});

//--------------------------------------------------------------
// Define plugin constants
//--------------------------------------------------------------
define('APW_WOO_VERSION', '1.0.0');
define('APW_WOO_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('APW_WOO_PLUGIN_URL', plugin_dir_url(__FILE__));
define('APW_WOO_PLUGIN_FILE', __FILE__);
define('APW_WOO_PLUGIN_BASENAME', plugin_basename(__FILE__));
// Debug mode - set to true for debugging
define('APW_WOO_DEBUG_MODE', true);

//--------------------------------------------------------------
// Dependency Check Helper Functions
//--------------------------------------------------------------

/**
 * Check if WooCommerce is active
 */
function apw_woo_is_woocommerce_active() {
    return in_array(
        'woocommerce/woocommerce.php',
        apply_filters('active_plugins', get_option('active_plugins'))
    );
}

/**
 * Check if ACF Pro is active
 */
function apw_woo_is_acf_pro_active() {
    // First, check if the ACF Pro plugin is active
    if (in_array('advanced-custom-fields-pro/acf.php', apply_filters('active_plugins', get_option('active_plugins')))) {
        return true;
    }

    // If not found in the standard location, check for other possible ACF Pro paths
    $possible_acf_paths = [
        'advanced-custom-fields-pro/acf.php',
        'acf-pro/acf.php',
        'acf/acf.php'
    ];

    foreach ($possible_acf_paths as $path) {
        if (in_array($path, apply_filters('active_plugins', get_option('active_plugins')))) {
            return true;
        }
    }

    // Also check if ACF function exists as a final check
    return function_exists('acf_register_block_type');
}

//--------------------------------------------------------------
// FAQ Helper Functions
//--------------------------------------------------------------

/**
 * Get the FAQ page ID for a specific context
 *
 * @param string $context The context for which to retrieve the FAQ page ID (shop, category, etc.)
 * @return int The FAQ page ID
 */
function apw_woo_get_faq_page_id($context = 'shop') {
    // Default fallback values
    $default_ids = array(
        'shop' => 0, // Default to 0 (no FAQs) instead of hardcoded 66
        'category' => 0,
        'product' => 0
    );

    // Get value from options if set
    $option_name = 'apw_woo_faq_' . $context . '_page_id';
    $page_id = get_option($option_name, $default_ids[$context]);

    // Allow filtering
    $page_id = apply_filters('apw_woo_' . $context . '_faq_page_id', $page_id);

    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log("FAQ Page ID for {$context}: {$page_id}");
    }

    return absint($page_id);
}

/**
 * Test ACF FAQ field retrieval across all contexts
 *
 * This function helps verify that FAQs are working correctly with template changes
 * and buffering approach.
 *
 * @param mixed $object The object to test (product, category, or page ID)
 * @param string $type The type of object ('product', 'category', or 'page')
 * @return array|false The retrieved FAQs or false on failure
 */
function apw_woo_test_faq_retrieval($object, $type = '') {
    if (empty($type) && is_numeric($object)) {
        $type = 'page';
    } elseif (empty($type) && is_a($object, 'WC_Product')) {
        $type = 'product';
    } elseif (empty($type) && is_a($object, 'WP_Term')) {
        $type = 'category';
    }

    if (!function_exists('get_field')) {
        apw_woo_log("FAQ TEST ERROR: ACF's get_field function does not exist");
        return false;
    }

    $result = array(
        'type' => $type,
        'has_acf' => function_exists('get_field'),
        'object_valid' => false,
        'faqs_retrieved' => false,
        'faqs_count' => 0,
        'buffer_level' => apw_woo_get_ob_level(),
        'error' => ''
    );

    switch ($type) {
        case 'product':
            if (!is_a($object, 'WC_Product')) {
                $result['error'] = 'Invalid product object';
                break;
            }
            $result['object_valid'] = true;
            $result['object_id'] = $object->get_id();
            $result['object_name'] = $object->get_name();
            $faqs = get_field('faqs', $object->get_id());
            break;

        case 'category':
            if (!is_a($object, 'WP_Term')) {
                $result['error'] = 'Invalid category object';
                break;
            }
            $result['object_valid'] = true;
            $result['object_id'] = $object->term_id;
            $result['object_name'] = $object->name;
            $faqs = get_field('faqs', $object);
            break;

        case 'page':
            if (!is_numeric($object)) {
                $result['error'] = 'Invalid page ID';
                break;
            }
            $result['object_valid'] = true;
            $result['object_id'] = $object;
            $result['object_name'] = get_the_title($object);
            $faqs = get_field('faqs', $object);
            break;

        default:
            $result['error'] = 'Unknown object type: ' . $type;
            apw_woo_log("FAQ TEST ERROR: " . $result['error']);
            return false;
    }

    if (!empty($faqs)) {
        $result['faqs_retrieved'] = true;
        $result['faqs_count'] = count($faqs);

        // Validate FAQ structure
        $valid_structure = apw_woo_validate_faq_structure($faqs);
        $result['valid_structure'] = $valid_structure['valid'];
        $result['structure_errors'] = $valid_structure['errors'];

        // Log detailed sample of first FAQ
        if (!empty($faqs[0])) {
            $result['faqs_sample'] = array(
                'has_question' => isset($faqs[0]['question']),
                'has_answer' => isset($faqs[0]['answer']),
                'question_length' => isset($faqs[0]['question']) ? strlen($faqs[0]['question']) : 0,
                'answer_length' => isset($faqs[0]['answer']) ? strlen($faqs[0]['answer']) : 0,
            );
        }
    }

    // Log the test results
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log("FAQ TEST for {$type}: " .
            ($result['faqs_retrieved'] ? "SUCCESS - Found {$result['faqs_count']} FAQs" : "FAILED - No FAQs found") .
            " for {$result['object_name']} (ID: {$result['object_id']})");
        apw_woo_log("Output buffer level during FAQ test: {$result['buffer_level']}");

        if (!empty($result['structure_errors'])) {
            apw_woo_log("FAQ structure errors: " . implode(', ', $result['structure_errors']));
        }
    }

    return $result['faqs_retrieved'] ? $faqs : false;
}

/**
 * Validate FAQ structure against expected format
 *
 * @param array $faqs Array of FAQs to validate
 * @return array Result with 'valid' boolean and 'errors' array
 */
function apw_woo_validate_faq_structure($faqs) {
    $result = array(
        'valid' => true,
        'errors' => array()
    );

    if (!is_array($faqs)) {
        $result['valid'] = false;
        $result['errors'][] = 'FAQs is not an array';
        return $result;
    }

    foreach ($faqs as $index => $faq) {
        // Check if each FAQ is an array
        if (!is_array($faq)) {
            $result['valid'] = false;
            $result['errors'][] = "FAQ #{$index} is not an array";
            continue;
        }

        // Check for required fields
        if (!isset($faq['question']) || empty($faq['question'])) {
            $result['valid'] = false;
            $result['errors'][] = "FAQ #{$index} is missing question field";
        }

        if (!isset($faq['answer']) || empty($faq['answer'])) {
            $result['valid'] = false;
            $result['errors'][] = "FAQ #{$index} is missing answer field";
        }
    }

    return $result;
}

/**
 * Check if output buffering is active and return level
 *
 * @return int Current output buffering level
 */
function apw_woo_get_ob_level() {
    return ob_get_level();
}

//--------------------------------------------------------------
// Logging and Debug Functionality
//--------------------------------------------------------------

/**
 * Create log directory and log file if they don't exist
 */
function apw_woo_setup_logs() {
    if (APW_WOO_DEBUG_MODE) {
        $log_dir = APW_WOO_PLUGIN_DIR . 'logs';
        if (!file_exists($log_dir)) {
            wp_mkdir_p($log_dir);
            // Create .htaccess file to protect logs directory
            $htaccess_content = "# Deny access to all files in this directory
<Files \"*\">
    <IfModule mod_authz_core.c>
        Require all denied
    </IfModule>
    <IfModule !mod_authz_core.c>
        Order deny,allow
        Deny from all
    </IfModule>
</Files>";
            file_put_contents($log_dir . '/.htaccess', $htaccess_content);
            // Create index.php to prevent directory listing
            file_put_contents($log_dir . '/index.php', '<?php // Silence is golden.');
        }
    }
}

/**
 * Log messages when debug mode is enabled
 */
function apw_woo_log($message) {
    if (APW_WOO_DEBUG_MODE) {
        // Set timezone to EST (New York)
        $timezone = new DateTimeZone('America/New_York');
        $date = new DateTime('now', $timezone);
        // Format the date for file name and timestamp
        $log_file = APW_WOO_PLUGIN_DIR . 'logs/debug-' . $date->format('Y-m-d') . '.log';
        if (is_array($message) || is_object($message)) {
            $message = print_r($message, true);
        }
        $timestamp = $date->format('[Y-m-d H:i:s T]'); // T will show timezone abbreviation
        $formatted_message = $timestamp . ' ' . $message . PHP_EOL;
        error_log($formatted_message, 3, $log_file);
    }
}

//--------------------------------------------------------------
// File and Asset Management Functions
//--------------------------------------------------------------

/**
 * Auto-include all PHP files in the includes directory
 */
function apw_woo_autoload_files() {
    $includes_dir = APW_WOO_PLUGIN_DIR . 'includes';
    if (!file_exists($includes_dir)) {
        wp_mkdir_p($includes_dir);
        apw_woo_log('Created includes directory.');
    }
    apw_woo_log('Starting to autoload files.');
    // Get all php files from includes directory
    $includes_files = glob($includes_dir . '/*.php');
    // Load all files in the includes directory
    foreach ($includes_files as $file) {
        if (file_exists($file)) {
            require_once $file;
            apw_woo_log('Loaded file: ' . basename($file));
        }
    }
    // Autoload subdirectories if they exist
    $subdirs = array('admin', 'frontend', 'templates');
    foreach ($subdirs as $subdir) {
        $subdir_path = $includes_dir . '/' . $subdir;
        if (file_exists($subdir_path)) {
            $subdir_files = glob($subdir_path . '/*.php');
            foreach ($subdir_files as $file) {
                if (file_exists($file)) {
                    require_once $file;
                    apw_woo_log('Loaded file: ' . $subdir . '/' . basename($file));
                }
            }
        }
    }
    apw_woo_log('Finished autoloading files.');
}

/**
 * Register and enqueue CSS/JS assets with cache busting
 * Only loads assets on WooCommerce pages to optimize performance
 */
function apw_woo_register_assets() {
    // Only load on WooCommerce pages
    if (!is_woocommerce() && !is_cart() && !is_checkout() && !is_account_page()) {
        return;
    }

    // Get current page type for conditional loading
    $current_page_type = 'generic';
    if (is_shop()) {
        $current_page_type = 'shop';
    } elseif (is_product()) {
        $current_page_type = 'product';
    } elseif (is_product_category()) {
        $current_page_type = 'category';
    } elseif (is_cart()) {
        $current_page_type = 'cart';
    } elseif (is_checkout()) {
        $current_page_type = 'checkout';
    } elseif (is_account_page()) {
        $current_page_type = 'account';
    }

    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log("Loading APW WooCommerce Plugin assets on {$current_page_type} page");
    }

    // Define asset paths - common assets
    $css_file = APW_WOO_PLUGIN_DIR . 'assets/css/apw-woo-public.css';
    $js_file = APW_WOO_PLUGIN_DIR . 'assets/js/apw-woo-public.js';

    // Define page-specific asset paths for future use
    $page_specific_css = APW_WOO_PLUGIN_DIR . "assets/css/apw-woo-{$current_page_type}.css";
    $page_specific_js = APW_WOO_PLUGIN_DIR . "assets/js/apw-woo-{$current_page_type}.js";

    // CSS with cache busting - common CSS
    if (file_exists($css_file)) {
        $css_ver = filemtime($css_file);
        wp_register_style(
            'apw-woo-styles',
            APW_WOO_PLUGIN_URL . 'assets/css/apw-woo-public.css',
            array(),
            $css_ver
        );
        wp_enqueue_style('apw-woo-styles');
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Enqueued common CSS with version: ' . $css_ver);
        }
    }

    // Page-specific CSS if it exists
    if (file_exists($page_specific_css)) {
        $css_ver = filemtime($page_specific_css);
        wp_register_style(
            "apw-woo-{$current_page_type}-styles",
            APW_WOO_PLUGIN_URL . "assets/css/apw-woo-{$current_page_type}.css",
            array('apw-woo-styles'), // Depend on common styles
            $css_ver
        );
        wp_enqueue_style("apw-woo-{$current_page_type}-styles");
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("Enqueued {$current_page_type}-specific CSS with version: " . $css_ver);
        }
    }

    // JS with cache busting - common JS
    if (file_exists($js_file)) {
        $js_ver = filemtime($js_file);
        wp_register_script(
            'apw-woo-scripts',
            APW_WOO_PLUGIN_URL . 'assets/js/apw-woo-public.js',
            array('jquery'),
            $js_ver,
            true
        );
        wp_enqueue_script('apw-woo-scripts');
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Enqueued common JS with version: ' . $js_ver);
        }
    }

    // Page-specific JS if it exists
    if (file_exists($page_specific_js)) {
        $js_ver = filemtime($page_specific_js);
        wp_register_script(
            "apw-woo-{$current_page_type}-scripts",
            APW_WOO_PLUGIN_URL . "assets/js/apw-woo-{$current_page_type}.js",
            array('jquery', 'apw-woo-scripts'), // Depend on jQuery and common scripts
            $js_ver,
            true
        );
        wp_enqueue_script("apw-woo-{$current_page_type}-scripts");
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("Enqueued {$current_page_type}-specific JS with version: " . $js_ver);
        }
    }

    // Add page-specific data for JS if needed
    $page_data = array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'page_type' => $current_page_type,
        'nonce' => wp_create_nonce('apw_woo_nonce')
    );

    // Allow other parts of the plugin to modify JS data
    $page_data = apply_filters('apw_woo_js_data', $page_data, $current_page_type);

    // Localize script with data
    wp_localize_script('apw-woo-scripts', 'apwWooData', $page_data);
}

//--------------------------------------------------------------
// Plugin Initialization and Core Functions
//--------------------------------------------------------------

/**
 * Define ACF field structure for FAQs
 */
function apw_woo_define_faq_field_structure() {
    // Only execute on admin pages that might use this information
    if (!is_admin()) {
        return;
    }

    // Documentation constants for ACF field structure
    define('APW_WOO_FAQ_FIELD_GROUP', 'faqs');
    define('APW_WOO_FAQ_QUESTION_FIELD', 'question');
    define('APW_WOO_FAQ_ANSWER_FIELD', 'answer');

    // Document expected FAQ structure for site administrators
    add_action('admin_notices', 'apw_woo_display_faq_field_notice');
}

/**
 * Display admin notice about FAQ field structure
 */
function apw_woo_display_faq_field_notice() {
    // Only show this notice on ACF field group edit pages
    $screen = get_current_screen();
    if (!$screen || $screen->base !== 'acf-field-group') {
        return;
    }

    ?>
    <div class="notice notice-info is-dismissible">
        <p><strong><?php _e('APW WooCommerce Plugin FAQ Field Structure', 'apw-woo-plugin'); ?></strong></p>
        <p><?php _e('This plugin expects FAQs to be configured as a repeater field named "faqs" with the following sub-fields:', 'apw-woo-plugin'); ?></p>
        <ul style="margin-left: 20px; list-style-type: disc;">
            <li><?php _e('<strong>question</strong> - Text field for the FAQ question', 'apw-woo-plugin'); ?></li>
            <li><?php _e('<strong>answer</strong> - Wysiwyg/textarea field for the FAQ answer', 'apw-woo-plugin'); ?></li>
        </ul>
        <p><?php _e('This field should be added to product, category, and page content types.', 'apw-woo-plugin'); ?></p>
    </div>
    <?php
}

/**
 * Initialize the plugin
 */
function apw_woo_init() {
    // Setup logs first
    apw_woo_setup_logs();
    apw_woo_log('Plugin initialization started.');

    // Check if WooCommerce is active
    if (!apw_woo_is_woocommerce_active()) {
        add_action('admin_notices', function() {
            ?>
            <div class="notice notice-error">
                <p><?php _e('APW WooCommerce Plugin requires WooCommerce to be installed and activated.', 'apw-woo-plugin'); ?></p>
            </div>
            <?php
        });
        apw_woo_log('WooCommerce not active - plugin initialization stopped.');
        return;
    }

    // Check if ACF Pro is active
    if (!apw_woo_is_acf_pro_active()) {
        add_action('admin_notices', function() {
            ?>
            <div class="notice notice-error">
                <p><?php _e('APW WooCommerce Plugin requires Advanced Custom Fields PRO to be installed and activated.', 'apw-woo-plugin'); ?></p>
            </div>
            <?php
        });
        apw_woo_log('ACF Pro not active - plugin initialization stopped.');
        return;
    }

    // Define FAQ field structure
    apw_woo_define_faq_field_structure();

    // Autoload files
    apw_woo_autoload_files();

    // Initialize main plugin class if it exists
    if (class_exists('APW_Woo_Plugin')) {
        $plugin = APW_Woo_Plugin::get_instance();
        $plugin->init();
        apw_woo_log('Main plugin class initialized.');
    } else {
        apw_woo_log('Main plugin class not found.');
    }

    // Register assets
    add_action('wp_enqueue_scripts', 'apw_woo_register_assets');
}

//--------------------------------------------------------------
// Plugin Activation/Deactivation
//--------------------------------------------------------------

/**
 * Plugin activation hook
 */
function apw_woo_activate() {
    // Setup logs directory
    apw_woo_setup_logs();
    apw_woo_log('Plugin activated.');
    // Flush rewrite rules
    flush_rewrite_rules();
}
register_activation_hook(__FILE__, 'apw_woo_activate');

/**
 * Plugin deactivation hook
 */
function apw_woo_deactivate() {
    if (APW_WOO_DEBUG_MODE) {
        apw_woo_log('Plugin deactivated.');
    }
    // Clean up if needed
    // (Add any cleanup code here)
    // Flush rewrite rules
    flush_rewrite_rules();
}
register_deactivation_hook(__FILE__, 'apw_woo_deactivate');

//--------------------------------------------------------------
// Testing & Debugging Utilities
//--------------------------------------------------------------

/**
 * Simple test function to verify WooCommerce template filters are working
 */
function apw_woo_test_template_override($template, $template_name, $template_path) {
    // Log when this filter runs
    apw_woo_log('TEST: woocommerce_locate_template filter triggered for ' . $template_name);
    error_log('APW WOO TEST: woocommerce_locate_template filter triggered for ' . $template_name);
    // Return the original template
    return $template;
}
add_filter('woocommerce_locate_template', 'apw_woo_test_template_override', 999, 3);

// Initialize the plugin
add_action('plugins_loaded', 'apw_woo_init');
</file>

<file path="includes/class-template-loader.php">
<?php
/**
 * Template Loader for APW WooCommerce Plugin
 *
 * @package APW_Woo_Plugin
 */
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
/**
 * Template Loader
 *
 * Handles the loading of custom templates for WooCommerce pages,
 * including product, category, and shop pages.
 */
class APW_Woo_Template_Loader {
    /**
     * Template path constants
     */
    private const TEMPLATE_DIRECTORY = 'templates/';
    private const WOOCOMMERCE_DIRECTORY = 'woocommerce/';
    private const PARTIALS_DIRECTORY = 'partials/';
    private const SHOP_TEMPLATE = 'woocommerce/partials/shop-categories-display.php';
    private const CATEGORY_TEMPLATE = 'woocommerce/partials/category-products-display.php';
    private const PRODUCT_TEMPLATE = 'woocommerce/single-product.php';
    private const CART_TEMPLATE = 'woocommerce/cart/cart.php';
    private const CHECKOUT_TEMPLATE = 'woocommerce/checkout/form-checkout.php';
    private const MY_ACCOUNT_TEMPLATE = 'woocommerce/myaccount/my-account.php';
    /**
     * Store the original product ID to prevent template issues
     *
     * @var int
     */
    private static $original_product_id = 0;

    /**
     * Store the original product object
     *
     * @var WC_Product
     */
    private static $original_product = null;
    /**
     * Hook priority constants
     */
    private const TEMPLATE_FILTER_PRIORITY = 10;
    private const TEMPLATE_FILTER_ARGS = 3;
    /**
     * Instance of this class
     *
     * @var self
     */
    private static $instance = null;
    /**
     * Template directory path
     *
     * @var string
     */
    private $template_path;
    /**
     * Constructor
     */
    private function __construct() {
        $this->template_path = APW_WOO_PLUGIN_DIR . self::TEMPLATE_DIRECTORY;
        $this->init_hooks();
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Template loader initialized');
        }
    }
    /**
     * Get instance
     *
     * @return self
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    /**
     * Initialize hooks
     */
    private function init_hooks() {
        // Add our plugin template directory to WooCommerce template paths
        add_filter(
            'woocommerce_locate_template',
            [$this, 'locate_template'],
            self::TEMPLATE_FILTER_PRIORITY,
            self::TEMPLATE_FILTER_ARGS
        );
        // Modify shop templates
        add_filter(
            'wc_get_template_part',
            [$this, 'get_template_part'],
            self::TEMPLATE_FILTER_PRIORITY,
            self::TEMPLATE_FILTER_ARGS
        );
        // Register template include filter for better template control
        $this->register_template_include_filter();
        // Keep the legacy method for backward compatibility during transition
        // Can be removed in a future version once we confirm the new method works
        add_action('woocommerce_before_main_content', [$this, 'maybe_load_custom_template']);
        // Remove default Flatsome/WooCommerce elements
        $this->remove_default_woocommerce_elements();
        // Debug product permalinks
        if (APW_WOO_DEBUG_MODE) {
            add_filter('post_type_link', [$this, 'debug_product_permalinks'], 99, 2);
        }
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Template loader hooks initialized with template_include filter');
        }
    }
    /**
     * Remove default WooCommerce and Flatsome elements that we don't want
     */
    private function remove_default_woocommerce_elements() {
        // Remove Flatsome page title (which includes breadcrumbs)
        remove_action('flatsome_after_header', 'flatsome_pages_title', 12);
        // Additional Flatsome-specific removals for shop title
        if (function_exists('flatsome_remove_shop_header')) {
            flatsome_remove_shop_header();
        } else {
            // Manual removal if function doesn't exist
            remove_action('flatsome_after_header', 'woocommerce_breadcrumb', 20);
            remove_action('woocommerce_before_main_content', 'woocommerce_breadcrumb', 20);
            remove_action('woocommerce_archive_description', 'woocommerce_taxonomy_archive_description', 10);
            remove_action('woocommerce_archive_description', 'woocommerce_product_archive_description', 10);
        }
        // Remove shop tools (ordering, result count)
        remove_action('woocommerce_before_shop_loop', 'woocommerce_result_count', 20);
        remove_action('woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30);
        // Target Flatsome's shop-page-title container directly
        add_action('wp_head', function() {
            if (is_woocommerce()) {
                echo '<style>.shop-page-title { display: none !important; }</style>';
            }
        });
        // Additional safety: remove at higher priority
        add_action('init', function() {
            remove_action('flatsome_after_header', 'flatsome_pages_title', 12);
            remove_action('woocommerce_before_main_content', 'woocommerce_breadcrumb', 20);
            remove_action('woocommerce_before_shop_loop', 'woocommerce_result_count', 20);
            remove_action('woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30);
        }, 20);
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Removed default WooCommerce and Flatsome UI elements');
        }
    }
    /**
     * Debug product permalinks
     *
     * @param string $permalink The current permalink
     * @param object $post The current post
     * @return string The unchanged permalink
     */
    public function debug_product_permalinks($permalink, $post) {
        if ($post->post_type === 'product') {
            apw_woo_log("Product permalink for {$post->post_name} (ID: {$post->ID}): {$permalink}");
        }
        return $permalink;
    }
    /**
     * Debug permalink generation
     *
     * @param string $product_slug The current product slug
     * @param string $requested_url The requested URL
     */
    private function debug_permalink($product_slug, $requested_url) {
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("Permalink Debug - Product Slug: {$product_slug}, Requested URL: {$requested_url}");
        }
    }
    /**
     * Locate a template and return the path for inclusion.
     *
     * @param string $template      Original template path.
     * @param string $template_name Template name.
     * @param string $template_path Template path.
     * @return string
     */
    public function locate_template($template, $template_name, $template_path) {
        // Look for template in our plugin
        $custom_template = $this->find_template_in_plugin($template_name);
        // Return our plugin template if it exists, otherwise return the original template
        if ($custom_template) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("Using custom template: {$custom_template}");
            }
            return $custom_template;
        }
        return $template;
    }
    /**
     * Get template part (for templates in loops)
     *
     * @param string $template Original template path.
     * @param string $slug     Template slug.
     * @param string $name     Template name.
     * @return string
     */
    public function get_template_part($template, $slug, $name) {
        // Create the template part filename
        $template_name = $slug . '-' . $name . '.php';
        // Look for template in our plugin
        $custom_template = $this->find_template_in_plugin($template_name);
        // Return our plugin template if it exists, otherwise return the original template
        if ($custom_template) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("Using custom template part: {$custom_template}");
            }
            return $custom_template;
        }
        return $template;
    }
    /**
     * Find a template in plugin directories
     *
     * @param string $template_name Template name.
     * @return string|false Path to template file or false if not found.
     */
    private function find_template_in_plugin($template_name) {
        // Define possible locations to check (in order of preference)
        $locations = [
            $this->template_path . self::WOOCOMMERCE_DIRECTORY . $template_name,
            $this->template_path . $template_name
        ];
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("Looking for template: {$template_name}");
        }
        // Check each location
        foreach ($locations as $location) {
            if ($this->template_exists($location)) {
                return $location;
            }
        }
        return false;
    }
    /**
     * Check if a template file exists
     *
     * @param string $template_path Full path to template.
     * @return bool
     */
    private function template_exists($template_path) {
        $exists = file_exists($template_path);
        if ($exists && APW_WOO_DEBUG_MODE) {
            apw_woo_log("Template found: {$template_path}");
        }
        return $exists;
    }
    /**
     * Load custom template based on the current view
     * Handles custom URL structures for products, categories, and shop
     */
    public function maybe_load_custom_template() {
        global $post, $wp;
        // Only affect WooCommerce pages
        if (!is_woocommerce()) {
            return;
        }
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("maybe_load_custom_template - Current post: " . ($post ? $post->post_name : 'No post'));
        }
        // Detect single product pages using multiple methods
        $is_single_product = $this->detect_product_page($wp);
        // Load appropriate template based on page type
        if ($is_single_product && $post) {
            // Force WooCommerce to use the correct product
            $GLOBALS['product'] = wc_get_product($post);
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("Loading product template for: " . $post->post_name . " (ID: " . $post->ID . ")");
            }
            $this->load_template_and_remove_defaults(self::PRODUCT_TEMPLATE);
        } elseif ($this->is_main_shop_page()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("Loading shop page template");
            }
            $this->load_template_and_remove_defaults(self::SHOP_TEMPLATE);
        } elseif (is_product_category()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("Loading category template");
            }
            $this->load_template_and_remove_defaults(self::CATEGORY_TEMPLATE);
        }
    }
    /**
     * Detect if current page is a product page using multiple methods
     *
     * @param object $wp The WordPress environment object
     * @return bool True if page is a product page
     */
    private function detect_product_page($wp) {
        global $post;
        // Debug the current request
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("PRODUCT DETECTION: Starting product page detection");
            apw_woo_log("PRODUCT DETECTION: Request URL: " . print_r($wp->request, true));
            if ($post) {
                apw_woo_log("PRODUCT DETECTION: Current post: " . $post->post_name . " (ID: " . $post->ID . ", Type: " . get_post_type($post) . ")");
            } else {
                apw_woo_log("PRODUCT DETECTION: No current post object found");
            }
        }
        // Method 1: Standard WooCommerce function
        if (is_product()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("PRODUCT DETECTION: Method 1 SUCCESS - Detected as product via is_product()");
            }
            return true;
        } else if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("PRODUCT DETECTION: Method 1 FAILED - is_product() returned false");
        }
        // Method 2: WordPress singular check
        if (get_post_type() === 'product' && is_singular('product')) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("PRODUCT DETECTION: Method 2 SUCCESS - Detected as product via get_post_type and is_singular");
            }
            return true;
        } else if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("PRODUCT DETECTION: Method 2 FAILED - get_post_type: " . get_post_type() . ", is_singular('product'): " . (is_singular('product') ? 'true' : 'false'));
        }
        // Method 3: Custom URL structure detection
        if ($wp->request) {
            $url_parts = explode('/', trim($wp->request, '/'));
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("PRODUCT DETECTION: Method 3 - URL parts: " . print_r($url_parts, true));
            }
            // Check if URL starts with 'products'
            if (count($url_parts) >= 2 && $url_parts[0] === 'products') {
                // Get the last part of the URL as the product slug
                $product_slug = end($url_parts);
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("PRODUCT DETECTION: Method 3 - Trying to find product with slug: " . $product_slug);
                }
                // Try to find this product
                $args = array(
                    'name'        => $product_slug,
                    'post_type'   => 'product',
                    'post_status' => 'publish',
                    'numberposts' => 1
                );
                $products = get_posts($args);
                if (!empty($products)) {
                    $product_post = $products[0];
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("PRODUCT DETECTION: Method 3 SUCCESS - Found product by slug: " . $product_slug . " (ID: " . $product_post->ID . ")");
                    }
                    // Make sure WP knows we're on this product
                    $post = $product_post;
                    setup_postdata($post);
                    // Override the main query
                    global $wp_query;
                    $wp_query->is_single = true;
                    $wp_query->is_singular = true;
                    $wp_query->is_product = true;
                    $wp_query->is_post_type_archive = false;
                    $wp_query->is_archive = false;
                    $wp_query->queried_object = $post;
                    $wp_query->queried_object_id = $post->ID;
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("PRODUCT DETECTION: Method 3 - Override main query settings to force product page");
                    }
                    return true;
                } else {
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("PRODUCT DETECTION: Method 3 FAILED - No product found with slug: " . $product_slug);
                        // Check if this is potentially a category
                        $term = get_term_by('slug', $product_slug, 'product_cat');
                        if ($term) {
                            apw_woo_log("PRODUCT DETECTION: Note - Found a category with this slug instead: " . $term->name);
                        }
                    }
                }
            } else if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("PRODUCT DETECTION: Method 3 FAILED - URL does not match expected product URL pattern");
            }
        } else if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("PRODUCT DETECTION: Method 3 FAILED - No request URL found");
        }
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("PRODUCT DETECTION: All methods failed - not a product page");
        }
        return false;
    }
    /**
     * Check if we're on the main shop page
     *
     * @return bool
     */
    private function is_main_shop_page() {
        return is_shop() && !is_search();
    }
    /**
     * Load template and remove default WooCommerce content
     *
     * @param string $template_relative_path Relative path to template from template directory
     * @param array $preserve_hooks Optional array of hooks to preserve
     * @return string|bool Template content if successful, false otherwise
     */
    public function load_template_and_remove_defaults($template_relative_path, $preserve_hooks = array()) {
        $template_path = $this->template_path . $template_relative_path;
        if (file_exists($template_path)) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log('Loading template with buffering: ' . $template_path);
            }
            // Remove default WooCommerce content hooks, but preserve specified ones
            $this->remove_default_woocommerce_content($preserve_hooks);
            // Start output buffering
            ob_start();
            include($template_path);
            $content = ob_get_clean();
            // Validate template structure if in debug mode
            if (APW_WOO_DEBUG_MODE) {
                $this->validate_template_structure($content, $template_path);
            }
            return $content;
        }
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("Template not found: {$template_path}");
        }
        return false;
    }
    /**
     * Validate template structure to catch common template issues
     *
     * @param string $content The template content
     * @param string $template_path The template path for reference in logs
     * @return bool True if validation passes, false if issues found
     */
    private function validate_template_structure($content, $template_path) {
        $validation_passed = true;
        $template_name = basename($template_path);
        // Check for multiple get_header calls
        $header_count = substr_count($content, 'get_header');
        if ($header_count > 1) {
            apw_woo_log("TEMPLATE ERROR: {$template_name} contains multiple get_header() calls ({$header_count})");
            $validation_passed = false;
        }
        // Check for multiple get_footer calls
        $footer_count = substr_count($content, 'get_footer');
        if ($footer_count > 1) {
            apw_woo_log("TEMPLATE ERROR: {$template_name} contains multiple get_footer() calls ({$footer_count})");
            $validation_passed = false;
        }
        // Check for direct HTML output outside of PHP (potential leaks)
        if (preg_match('/^\s*<(?!php|!DOCTYPE|!--|!$)/im', $content)) {
            apw_woo_log("TEMPLATE WARNING: {$template_name} might contain direct HTML output outside of PHP tags");
            $validation_passed = false;
        }
        // Check for common WooCommerce hooks that should be preserved
        $required_hooks = [
            'woocommerce_before_single_product',
            'woocommerce_after_single_product',
            'woocommerce_before_main_content',
            'woocommerce_after_main_content'
        ];
        foreach ($required_hooks as $hook) {
            if (!strpos($content, "do_action('{$hook}'") &&
                !strpos($content, "do_action(\"{$hook}\"")) {
                // Only log a warning for product template if it's a product-related hook
                if (strpos($template_name, 'product') !== false && strpos($hook, 'product') !== false) {
                    apw_woo_log("TEMPLATE WARNING: {$template_name} might be missing required hook: {$hook}");
                    $validation_passed = false;
                }
            }
        }
        // Log overall validation status
        if ($validation_passed) {
            apw_woo_log("TEMPLATE VALIDATED: {$template_name} structure looks good");
        } else {
            apw_woo_log("TEMPLATE ISSUES: {$template_name} has structural issues that should be addressed");
        }
        return $validation_passed;
    }
    /**
     * Remove default WooCommerce loop content while preserving specified hooks
     *
     * @param array $preserve_hooks Optional array of hooks to preserve in format ['hook_name' => ['callback' => 'function_name', 'priority' => 10]]
     */
    public function remove_default_woocommerce_content($preserve_hooks = array()) {
        // Store all hooks to remove in an array for easier maintenance
        $hooks_to_remove = [
            // Before shop loop hooks
            ['woocommerce_before_shop_loop', 'woocommerce_output_all_notices', 10],
            ['woocommerce_before_shop_loop', 'woocommerce_result_count', 20],
            ['woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30],
            // Shop loop hooks
            ['woocommerce_shop_loop', 'woocommerce_product_loop_start', 10],
            ['woocommerce_shop_loop', 'woocommerce_product_loop_end', 10],
            // After shop loop hooks
            ['woocommerce_after_shop_loop', 'woocommerce_pagination', 10],
            // No products found hook
            ['woocommerce_no_products_found', 'wc_no_products_found', 10],
            // Additional hooks that might interfere with extensions
            ['woocommerce_before_single_product', 'woocommerce_output_all_notices', 10]
        ];
        // Process hooks to remove
        foreach ($hooks_to_remove as $hook) {
            list($hook_name, $callback, $priority) = $hook;
            // Check if this hook should be preserved
            $preserve = false;
            if (isset($preserve_hooks[$hook_name])) {
                foreach ($preserve_hooks[$hook_name] as $preserved_callback) {
                    if ($preserved_callback['callback'] === $callback &&
                        $preserved_callback['priority'] === $priority) {
                        $preserve = true;
                        break;
                    }
                }
            }
            // Only remove if not preserved
            if (!$preserve) {
                remove_action($hook_name, $callback, $priority);
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("Removed hook: {$hook_name}, callback: {$callback}, priority: {$priority}");
                }
            } else {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("Preserved hook: {$hook_name}, callback: {$callback}, priority: {$priority}");
                }
            }
        }
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Finished processing WooCommerce content hooks');
        }
    }
    /**
     * Register a filter to intercept WordPress template inclusion
     * This allows us to override templates at the WordPress level
     */
    public function register_template_include_filter() {
        add_filter('template_include', array($this, 'maybe_override_template'), 99);
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Registered template_include filter');
        }
    }
    /**
     * Override template based on current page type
     *
     * @param string $template The current template path
     * @return string Modified template path
     */
    public function maybe_override_template($template) {
        global $wp, $post, $product;

        // First check for custom product permalink structure
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log("TEMPLATE OVERRIDE: Checking URL: " . $wp->request);
            apw_woo_log("TEMPLATE OVERRIDE: is_shop(): " . (is_shop() ? 'true' : 'false'));
            apw_woo_log("TEMPLATE OVERRIDE: is_product_category(): " . (is_product_category() ? 'true' : 'false'));
            apw_woo_log("TEMPLATE OVERRIDE: is_product(): " . (is_product() ? 'true' : 'false'));
            apw_woo_log("TEMPLATE OVERRIDE: is_cart(): " . (is_cart() ? 'true' : 'false'));
            apw_woo_log("TEMPLATE OVERRIDE: is_checkout(): " . (is_checkout() ? 'true' : 'false'));
            apw_woo_log("TEMPLATE OVERRIDE: is_account_page(): " . (is_account_page() ? 'true' : 'false'));
        }

        // Special handling for /products/%product_cat%/ permalink structure
        $url_parts = explode('/', trim($wp->request, '/'));
        if (count($url_parts) >= 3 && $url_parts[0] === 'products') {
            // Get the product slug (last part of URL)
            $product_slug = end($url_parts);

            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Checking for product with slug: " . $product_slug);
            }

            // Try to find a product with this slug
            $args = array(
                'name'        => $product_slug,
                'post_type'   => 'product',
                'post_status' => 'publish',
                'numberposts' => 1
            );
            $products = get_posts($args);

            if (!empty($products)) {
                $product_post = $products[0];

                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Found product '" . $product_post->post_title . "' (ID: " . $product_post->ID . ") at URL: " . $wp->request);
                }

                // Store the original product ID and object to ensure we can restore it
                self::$original_product_id = $product_post->ID;
                self::$original_product = wc_get_product($product_post->ID);

                if (APW_WOO_DEBUG_MODE && self::$original_product) {
                    apw_woo_log("PRODUCT DEBUG: Stored original product: " . self::$original_product->get_name() . " (ID: " . self::$original_product_id . ")");
                }

                // Setup the product post data
                $post = $product_post;
                setup_postdata($post);

                // Create a WC_Product object for use in template
                $GLOBALS['product'] = wc_get_product($product_post->ID);

                // Force WordPress to treat this as a product page
                global $wp_query;
                $wp_query->is_single = true;
                $wp_query->is_singular = true;
                $wp_query->is_product = true;
                $wp_query->is_archive = false;
                $wp_query->is_post_type_archive = false;
                $wp_query->is_tax = false;
                $wp_query->is_category = false;
                $wp_query->queried_object = $post;
                $wp_query->queried_object_id = $post->ID;

                // Add hooks to restore the original product during template rendering
                add_action('woocommerce_before_single_product', array($this, 'restore_original_product'));
                add_action('woocommerce_before_template_part', array($this, 'restore_original_product'));
                add_action('woocommerce_after_template_part', array($this, 'restore_original_product'));
                add_action('woocommerce_before_shop_loop_item', array($this, 'restore_original_product'));
                add_action('woocommerce_before_single_product_summary', array($this, 'restore_original_product'));
                add_action('woocommerce_after_single_product_summary', array($this, 'restore_original_product'));

                // Add hooks to fix Yoast SEO breadcrumbs and page title
                add_filter('wpseo_breadcrumb_links', array($this, 'fix_yoast_breadcrumbs'), 5);
                add_filter('wpseo_title', array($this, 'fix_yoast_title'), 5);
                add_filter('pre_get_document_title', array($this, 'fix_document_title'), 5);

                // Load the single product template
                $custom_template = $this->template_path . self::PRODUCT_TEMPLATE;
                if (file_exists($custom_template)) {
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("TEMPLATE OVERRIDE: Loading single product template: " . $custom_template);
                    }
                    return $custom_template;
                } else {
                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("TEMPLATE OVERRIDE ERROR: Could not find product template at: " . $custom_template);
                    }
                }
            } else if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: No product found with slug: " . $product_slug);
            }
        }

        // Handle category pages - check if we're on a product category page
        if (is_product_category()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Detected product category page");
            }

            $custom_template = $this->template_path . self::CATEGORY_TEMPLATE;
            if (file_exists($custom_template)) {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Loading category template: " . $custom_template);
                }
                return $custom_template;
            }
        }

        // Handle shop page
        if (is_shop() && !is_search()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Detected main shop page");
            }

            $custom_template = $this->template_path . self::SHOP_TEMPLATE;
            if (file_exists($custom_template)) {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Loading shop template: " . $custom_template);
                }
                return $custom_template;
            }
        }

        // Handle cart page
        if (is_cart()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Detected cart page");
            }

            $custom_template = $this->template_path . self::CART_TEMPLATE;
            if (file_exists($custom_template)) {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Loading cart template: " . $custom_template);
                }
                return $custom_template;
            }
        }

        // Handle checkout page
        if (is_checkout()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Detected checkout page");
            }

            $custom_template = $this->template_path . self::CHECKOUT_TEMPLATE;
            if (file_exists($custom_template)) {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Loading checkout template: " . $custom_template);
                }
                return $custom_template;
            }
        }

        // Handle account page
        if (is_account_page()) {
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("TEMPLATE OVERRIDE: Detected account page");
            }

            $custom_template = $this->template_path . self::MY_ACCOUNT_TEMPLATE;
            if (file_exists($custom_template)) {
                if (APW_WOO_DEBUG_MODE) {
                    apw_woo_log("TEMPLATE OVERRIDE: Loading account template: " . $custom_template);
                }
                return $custom_template;
            }
        }

        // If we've made it here, no custom template was found
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('No custom template found, using default: ' . $template);
        }
        return $template;
    }

    /**
     * Restore the original product during template rendering
     * This prevents WooCommerce hooks or related product displays from
     * causing the wrong product to be displayed
     */
    public function restore_original_product() {
        global $post, $product;

        // Only proceed if we have stored an original product and either:
        // 1. The current product is not a valid product object, or
        // 2. The current product ID doesn't match our original product ID
        if (self::$original_product_id > 0 && self::$original_product instanceof WC_Product &&
            (!is_a($product, 'WC_Product') || $product->get_id() != self::$original_product_id)) {

            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("PRODUCT FIX: Restoring original product ID: " . self::$original_product_id .
                    " (was: " . ($product ? $product->get_id() : 'none') . ")");
            }

            // Restore the original product
            $post = get_post(self::$original_product_id);
            setup_postdata($post);
            $product = self::$original_product;
        }
    }

    /**
     * Fix Yoast SEO breadcrumbs to use the correct product
     *
     * @param array $links The breadcrumb links
     * @return array Modified breadcrumb links
     */
    public function fix_yoast_breadcrumbs($links) {
        if (self::$original_product_id && self::$original_product) {
            // Find and replace the last item in the breadcrumb trail
            if (!empty($links) && is_array($links)) {
                $last_index = count($links) - 1;
                if (isset($links[$last_index])) {
                    $links[$last_index]['text'] = self::$original_product->get_name();
                    $links[$last_index]['url'] = get_permalink(self::$original_product_id);

                    if (APW_WOO_DEBUG_MODE) {
                        apw_woo_log("BREADCRUMB FIX: Replaced product in breadcrumbs with: " . self::$original_product->get_name());
                    }
                }
            }
        }
        return $links;
    }

    /**
     * Fix Yoast SEO title to use the correct product
     *
     * @param string $title The page title
     * @return string Modified page title
     */
    public function fix_yoast_title($title) {
        if (self::$original_product_id && self::$original_product) {
            // Check if the title contains incorrect product info
            $new_title = preg_replace('/.*?Wireless Router/', self::$original_product->get_name(), $title);

            if ($new_title !== $title && APW_WOO_DEBUG_MODE) {
                apw_woo_log("TITLE FIX: Changed page title from \"{$title}\" to \"{$new_title}\"");
            }

            return $new_title;
        }
        return $title;
    }

    /**
     * Fix document title as a fallback
     *
     * @param string $title The document title
     * @return string Modified document title
     */
    public function fix_document_title($title) {
        if (self::$original_product_id && self::$original_product && empty($title)) {
            $title = self::$original_product->get_name() . ' - ' . get_bloginfo('name');

            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log("DOCUMENT TITLE FIX: Set document title to \"{$title}\"");
            }
        }
        return $title;
    }
}
</file>

<file path="templates/woocommerce/single-product.php">
<?php
/**
 * Template for displaying single product pages
 *
 * @package APW_Woo_Plugin
 */
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
if (APW_WOO_DEBUG_MODE) {
    apw_woo_log('Loading single product template');
}
// Hook visualization function (only for admins in debug mode)
function apw_woo_hook_visualizer($hook_name) {
    if (!APW_WOO_DEBUG_MODE || !current_user_can('manage_options')) {
        return function() {};
    }
    return function() use ($hook_name) {
        $args = func_get_args();
        apw_woo_visualize_hook($hook_name, $args);
    };
}
// Helper function to visualize hook data (only for admins)
function apw_woo_visualize_hook($hook_name, $params = array()) {
    if (!APW_WOO_DEBUG_MODE || !current_user_can('manage_options')) {
        return;
    }
    echo '<div style="margin: 10px 0; padding: 10px; border: 2px dashed #ff6b6b; background-color: #fff; color: #333; font-family: monospace;">';
    echo '<h4 style="margin: 0 0 5px 0; color: #ff6b6b;">HOOK: ' . esc_html($hook_name) . '</h4>';
    if (!empty($params)) {
        echo '<p>Available Parameters:</p>';
        echo '<ul style="margin: 0; padding-left: 20px;">';
        foreach ($params as $key => $value) {
            echo '<li>';
            if (is_object($value)) {
                echo 'Object: ' . esc_html(get_class($value));
                // Show basic info for WC_Product objects
                if ($value instanceof WC_Product) {
                    echo ' (ID: ' . esc_html($value->get_id()) . ', Name: ' . esc_html($value->get_name()) . ')';
                }
            } elseif (is_array($value)) {
                echo 'Array: ' . count($value) . ' items';
            } else {
                echo gettype($value) . ': ' . esc_html(var_export($value, true));
            }
            echo '</li>';
        }
        echo '</ul>';
    } else {
        echo '<p>No parameters available for this hook.</p>';
    }
    echo '</div>';
}
// Only add visualization for admins in debug mode
if (APW_WOO_DEBUG_MODE && current_user_can('manage_options')) {
    // Register visualizers for key WooCommerce hooks
    $hooks_to_visualize = array(
        'woocommerce_before_single_product',
        'woocommerce_before_single_product_summary',
        'woocommerce_product_thumbnails',
        'woocommerce_single_product_summary',
        'woocommerce_before_add_to_cart_form',
        'woocommerce_before_variations_form',
        'woocommerce_before_add_to_cart_button',
        'woocommerce_before_single_variation',
        'woocommerce_single_variation',
        'woocommerce_after_single_variation',
        'woocommerce_after_add_to_cart_button',
        'woocommerce_after_variations_form',
        'woocommerce_after_add_to_cart_form',
        'woocommerce_product_meta_start',
        'woocommerce_product_meta_end',
        'woocommerce_share',
        'woocommerce_after_single_product_summary',
        'woocommerce_after_single_product',
        // Custom hooks for our plugin
        'apw_woo_before_product_faqs',
        'apw_woo_after_product_faqs'
    );
    // Add visualizers to all hooks
    foreach ($hooks_to_visualize as $hook) {
        add_action($hook, apw_woo_hook_visualizer($hook), 999);
    }
}
// Handle Product Add-Ons placement - preserve the hook structure
add_action('init', 'apw_woo_move_product_addons');
function apw_woo_move_product_addons() {
    // Only if Product Add-ons class exists
    if (class_exists('WC_Product_Addons_Display')) {
        // Remove from default location, preserving the hook itself
        remove_action('woocommerce_before_add_to_cart_button', array('WC_Product_Addons_Display', 'display'), 10);
        // Add to our desired location, maintaining correct hook integration
        add_action('woocommerce_product_meta_end', 'apw_woo_display_product_addons', 15);
        if (APW_WOO_DEBUG_MODE) {
            apw_woo_log('Product Add-ons relocated to product meta section');
        }
    }
}
// Function to display Product Add-Ons in our custom location
function apw_woo_display_product_addons() {
    global $product;
    if (!is_a($product, 'WC_Product')) {
        return;
    }
    // Check if Product Add-Ons are available for this product
    if (function_exists('get_product_addons')) {
        $product_addons = get_product_addons($product->get_id());
        if (!empty($product_addons)) {
            echo '<div class="apw-woo-product-addons">';
            echo '<h3 class="apw-woo-product-addons-title">' . esc_html__('Product Options', 'apw-woo-plugin') . '</h3>';
            // Use the original display method to ensure compatibility
            if (class_exists('WC_Product_Addons_Display') && method_exists('WC_Product_Addons_Display', 'display')) {
                WC_Product_Addons_Display::display();
            }
            echo '</div>'; // .apw-woo-product-addons
        }
    }
}
get_header();
// Get current product
global $product;
if (!is_a($product, 'WC_Product')) {
    $product = wc_get_product(get_the_ID());
}

// Store original product to prevent global variable changes from affecting our template
$original_product = $product;
$original_product_id = $product ? $product->get_id() : 0;

if (APW_WOO_DEBUG_MODE && $product) {
    apw_woo_log("PRODUCT DEBUG: Template loading with post: " . $product->get_name() . " (ID: " . $product->get_id() . ")");
    apw_woo_log("PRODUCT DEBUG: Current URL: " . $_SERVER['REQUEST_URI']);
    apw_woo_log("PRODUCT DEBUG: get_the_ID() returns: " . get_the_ID());
    global $wp_query;
    apw_woo_log("PRODUCT DEBUG: WP Query object: " . print_r($wp_query->query, true));
}

if ($product) :
    ?>
    <main id="main" class="site-main apw-woo-single-product-main" role="main">
        <!-- APW-WOO-TEMPLATE: single-product.php is loaded -->
        <!-- Header Block - Contains hero image, page title, and breadcrumbs -->
        <div class="apw-woo-section-wrapper apw-woo-header-block">
            <?php
            /**
             * Hook: apw_woo_before_product_header
             */
            do_action('apw_woo_before_product_header', $product);
            if (APW_WOO_DEBUG_MODE) {
                apw_woo_log('Rendering product page header');
            }
            if (shortcode_exists('block')) {
                echo do_shortcode('[block id="fourth-level-page-header"]');
            } else {
                // Fallback if shortcode doesn't exist
                echo '<h1 class="apw-woo-page-title">' . esc_html($product->get_name()) . '</h1>';
            }
            /**
             * Hook: apw_woo_after_product_header
             */
            do_action('apw_woo_after_product_header', $product);
            ?>
        </div>
        <!-- Use Flatsome's container while keeping our plugin-specific classes -->
        <div class="container">
            <div class="row">
                <div class="col apw-woo-content-wrapper">
                    <?php
                    /**
                     * Hook: woocommerce_before_single_product
                     *
                     * @hooked woocommerce_output_all_notices - 10
                     */
                    do_action('woocommerce_before_single_product');
                    ?>
                    <div id="product-<?php the_ID(); ?>" <?php wc_product_class('', get_the_ID()); ?>>
                        <!-- Product Content Section -->
                        <div class="row apw-woo-row">
                            <div class="col-md-6 apw-woo-product-gallery-col">
                                <?php do_action('apw_woo_before_product_gallery', $product); ?>
                                <div class="apw-woo-product-gallery-wrapper">
                                    <?php
                                    /**
                                     * Hook: woocommerce_before_single_product_summary
                                     *
                                     * @hooked woocommerce_show_product_sale_flash - 10
                                     * @hooked woocommerce_show_product_images - 20
                                     */
                                    do_action('woocommerce_before_single_product_summary');
                                    ?>
                                </div>
                                <?php do_action('apw_woo_after_product_gallery', $product); ?>
                            </div>
                            <div class="col-md-6 apw-woo-product-summary-col">
                                <?php do_action('apw_woo_before_product_summary', $product); ?>
                                <div class="apw-woo-product-summary">
                                    <?php
                                    /**
                                     * Hook: woocommerce_single_product_summary
                                     *
                                     * @hooked woocommerce_template_single_title - 5
                                     * @hooked woocommerce_template_single_rating - 10
                                     * @hooked woocommerce_template_single_price - 10
                                     * @hooked woocommerce_template_single_excerpt - 20
                                     * @hooked woocommerce_template_single_add_to_cart - 30
                                     * @hooked woocommerce_template_single_meta - 40
                                     * @hooked woocommerce_template_single_sharing - 50
                                     * @hooked WC_Structured_Data::generate_product_data() - 60
                                     */
                                    do_action('woocommerce_single_product_summary');
                                    ?>
                                </div>
                                <?php do_action('apw_woo_after_product_summary', $product); ?>
                            </div>
                        </div>
                        <?php
                        /**
                         * Hook: woocommerce_after_single_product_summary
                         *
                         * @hooked woocommerce_output_product_data_tabs - 10
                         * @hooked woocommerce_upsell_display - 15
                         * @hooked woocommerce_output_related_products - 20
                         */
                        do_action('woocommerce_after_single_product_summary');
                        ?>
                    </div>
                    <?php
                    /**
                     * Hook: woocommerce_after_single_product
                     */
                    do_action('woocommerce_after_single_product');
                    ?>
                    <!-- Product Description -->
                    <?php
                    // Make sure we're using the original product for the description
                    if ($original_product && $original_product->get_description()) :
                        ?>
                        <div class="row apw-woo-row">
                            <div class="col apw-woo-product-description-section">
                                <?php do_action('apw_woo_before_product_description', $original_product); ?>
                                <div class="apw-woo-product-description">
                                    <h2 class="apw-woo-product-description-title">
                                        <?php esc_html_e('Product Description', 'apw-woo-plugin'); ?>
                                    </h2>
                                    <?php echo apply_filters('the_content', $original_product->get_description()); ?>
                                </div>
                                <?php do_action('apw_woo_after_product_description', $original_product); ?>
                            </div>
                        </div>
                    <?php endif; ?>
                    <!-- FAQ Section -->
                    <div class="row apw-woo-row">
                        <div class="col apw-woo-faq-section-container">
                            <?php
                            // Reset product to original product before FAQ display
                            if (APW_WOO_DEBUG_MODE) {
                                apw_woo_log('PRODUCT DEBUG BEFORE FAQ: Current post: ' . (isset($post) ? $post->post_title . ' (ID: ' . $post->ID . ')' : 'No post'));
                                apw_woo_log('PRODUCT DEBUG BEFORE FAQ: Current product: ' . ($product ? $product->get_name() . ' (ID: ' . $product->get_id() . ')' : 'No product'));
                                apw_woo_log('PRODUCT DEBUG BEFORE FAQ: Original product was: ' . ($original_product ? $original_product->get_name() . ' (ID: ' . $original_product_id . ')' : 'No original product'));
                            }

                            // Reset to original product if it has changed
                            if ($original_product && $product && $product->get_id() != $original_product_id) {
                                $product = $original_product;
                                $post = get_post($original_product_id);
                                setup_postdata($post);

                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('PRODUCT DEBUG AFTER RESET: Current post: ' . ($post ? $post->post_title . ' (ID: ' . $post->ID . ')' : 'No post'));
                                    apw_woo_log('PRODUCT DEBUG AFTER RESET: Current product: ' . ($product ? $product->get_name() . ' (ID: ' . $product->get_id() . ')' : 'No product'));
                                }
                            }

                            /**
                             * Hook: apw_woo_before_product_faqs
                             */
                            do_action('apw_woo_before_product_faqs', $product);
                            // Include the FAQ display partial
                            if (file_exists(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php')) {
                                // Verify product is valid before passing to FAQ display
                                if (!is_a($product, 'WC_Product')) {
                                    if (APW_WOO_DEBUG_MODE) {
                                        apw_woo_log('ERROR: Invalid product object passed to FAQ display');
                                    }
                                    $faq_product = null;
                                } else {
                                    $faq_product = apply_filters('apw_woo_faq_product', $product);
                                    if (APW_WOO_DEBUG_MODE) {
                                        apw_woo_log('Passing product to FAQ display: ' . $faq_product->get_name() . ' (ID: ' . $faq_product->get_id() . ')');
                                    }
                                }
                                include(APW_WOO_PLUGIN_DIR . 'templates/partials/faq-display.php');
                            } else {
                                if (APW_WOO_DEBUG_MODE) {
                                    apw_woo_log('FAQ display partial not found');
                                }
                            }
                            /**
                             * Hook: apw_woo_after_product_faqs
                             */
                            do_action('apw_woo_after_product_faqs', $product);
                            ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
<?php
else:
    ?>
    <div class="container">
        <div class="row">
            <div class="col">
                <p><?php esc_html_e('Product not found.', 'apw-woo-plugin'); ?></p>
            </div>
        </div>
    </div>
<?php
endif;
get_footer();
</file>

</files>
